# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'sas.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from scripts.face_vectors import load_representations, find_target_identity, get_embedding, add_representation
from scripts.face_detection import extract_faces
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtMultimedia import *
import pandas as pd
import numpy as np
import cv2
import os
import sys
from datetime import date


class Ui_MainWindow(object):

    def __init__(self, database_path, students_information_path, inference_path, representation_path) -> None:
        self.database_path = database_path
        self.students_information_path = students_information_path
        self.inference_path = inference_path
        self.representation_path = representation_path
        self.IMG_SIZE = 160
        self.target_frame_size = (self.IMG_SIZE,self.IMG_SIZE)
        self.embeddings = load_representations(self.representation_path)

        self.classes = os.listdir(self.students_information_path)
        self.class_paths = [os.path.join(self.students_information_path, sub_dir) for sub_dir in self.classes 
                       if os.path.isdir(os.path.join(self.students_information_path, sub_dir))]
        
        self.msg_box = QtWidgets.QMessageBox()
        self.msg_box.setWindowTitle("Message!!!")
        #self.msg_box.setIcon(QtWidgets.QMessageBox.warning)

    def setupUi(self, MainWindow):

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1074, 660)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stackedWidget.sizePolicy().hasHeightForWidth())
        self.stackedWidget.setSizePolicy(sizePolicy)
        self.stackedWidget.setMinimumSize(QtCore.QSize(0, 0))
        self.stackedWidget.setObjectName("stackedWidget")
        self.Home = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Home.sizePolicy().hasHeightForWidth())
        self.Home.setSizePolicy(sizePolicy)
        self.Home.setObjectName("Home")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.Home)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.home_grid = QtWidgets.QGridLayout()
        self.home_grid.setVerticalSpacing(50)
        self.home_grid.setObjectName("home_grid")

        self.b2 = QtWidgets.QPushButton(self.Home)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.b2.sizePolicy().hasHeightForWidth())
        self.b2.setSizePolicy(sizePolicy)
        self.b2.setMinimumSize(QtCore.QSize(300, 40))
        self.b2.setMaximumSize(QtCore.QSize(300, 40))
        self.b2.setObjectName("b2")
        self.b2.setText("Record")
        self.b2.clicked.connect(self.home_to_record)
        self.home_grid.addWidget(self.b2, 1, 0, 1, 1)

        self.b1 = QtWidgets.QPushButton(self.Home)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.b1.sizePolicy().hasHeightForWidth())
        self.b1.setSizePolicy(sizePolicy)
        self.b1.setMinimumSize(QtCore.QSize(300, 40))
        self.b1.setMaximumSize(QtCore.QSize(300, 40))
        self.b1.setObjectName("b1")
        self.b1.setText("Student Information")
        self.b1.clicked.connect(self.home_to_student_information)
        self.home_grid.addWidget(self.b1, 0, 0, 1, 1)

        self.b3 = QtWidgets.QPushButton(self.Home)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.b3.sizePolicy().hasHeightForWidth())
        self.b3.setSizePolicy(sizePolicy)
        self.b3.setMinimumSize(QtCore.QSize(300, 40))
        self.b3.setMaximumSize(QtCore.QSize(300, 40))
        self.b3.setObjectName("b3")
        self.b3.setText("New Student")
        self.b3.clicked.connect(self.home_to_new_student)
        self.home_grid.addWidget(self.b3, 2, 0, 1, 1)
        self.verticalLayout_9.addLayout(self.home_grid)
        self.stackedWidget.addWidget(self.Home)
        self.verticalLayout_3.addWidget(self.stackedWidget)
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1074, 26))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menubar.sizePolicy().hasHeightForWidth())
        self.menubar.setSizePolicy(sizePolicy)
        self.menubar.setObjectName("menubar")
        self.menuHow_To = QtWidgets.QMenu(self.menubar)
        self.menuHow_To.setObjectName("menuHow_To")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.statusbar.sizePolicy().hasHeightForWidth())
        self.statusbar.setSizePolicy(sizePolicy)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionStudent_Information = QtWidgets.QAction(MainWindow)
        self.actionStudent_Information.setObjectName("actionStudent_Information")
        self.actionRecord = QtWidgets.QAction(MainWindow)
        self.actionRecord.setObjectName("actionRecord")
        self.actionNew_Student = QtWidgets.QAction(MainWindow)
        self.actionNew_Student.setObjectName("actionNew_Student")
        self.menuHow_To.addAction(self.actionStudent_Information)
        self.menuHow_To.addSeparator()
        self.menuHow_To.addAction(self.actionRecord)
        self.menuHow_To.addSeparator()
        self.menuHow_To.addAction(self.actionNew_Student)
        self.menubar.addAction(self.menuHow_To.menuAction())

        self.actionStudent_Information.triggered.connect(self.Students_information_menu)
        self.actionRecord.triggered.connect(self.Record_menu)
        self.actionNew_Student.triggered.connect(self.New_Student_menu)

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Automatic Student Attendance System"))
        self.menuHow_To.setTitle(_translate("MainWindow", "How To"))
        self.actionStudent_Information.setText(_translate("MainWindow", "Student Information"))
        self.actionRecord.setText(_translate("MainWindow", "Record"))
        self.actionNew_Student.setText(_translate("MainWindow", "New Student"))
    
    def Students_information_menu(self):
        self.msg_box.setInformativeText(
            "It shows the currently system enrolled students information (Their Name, ID). \
                You can a class to see the current students of that class"
                )
        self.msg_box.setIcon(QtWidgets.QMessageBox.Information)
        self.msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok) # seperate buttons with "|"
        self.msg_box.show()

    def Record_menu(self):
        self.msg_box.setInformativeText(
            "This option is used to record attendance in a class. you can select the\
            class name and date to take attendance for a particular class. \
            The left Table will mark any student present who is recognized in the camera."
                )
        self.msg_box.setIcon(QtWidgets.QMessageBox.Information)
        self.msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok) # seperate buttons with "|"
        self.msg_box.show()

    def New_Student_menu(self):
        self.msg_box.setInformativeText(
            "This option can be used to enroll a new student in the system. Write the student name, ID and  \
            his class name at the left boxes. Then capture his image through the capture button. \
            You can save the new student's information by just clicking the save button."
                )
        self.msg_box.setIcon(QtWidgets.QMessageBox.Information)
        self.msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok) # seperate buttons with "|"
        self.msg_box.show()

    def home_to_record(self):

        self.Record = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Record.sizePolicy().hasHeightForWidth())
        self.Record.setSizePolicy(sizePolicy)
        self.Record.setObjectName("Record")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.Record)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.record_grid = QtWidgets.QHBoxLayout()
        self.record_grid.setObjectName("record_grid")
        self.webcam_layout = QtWidgets.QVBoxLayout()
        self.webcam_layout.setObjectName("webcam_layout")
        self.webcam = QtWidgets.QLabel(self.Record)
        self.webcam.setText("")
        self.webcam.setObjectName("webcam")
        self.webcam_layout.addWidget(self.webcam)
        self.close_button = QtWidgets.QPushButton(self.Record)
        self.close_button.setMinimumSize(QtCore.QSize(200, 40))
        self.close_button.setMaximumSize(QtCore.QSize(200, 40))
        self.close_button.setObjectName("close_button")
        self.close_button.setText('Close')
        self.close_button.clicked.connect(self.record_to_home)
        self.webcam_layout.addWidget(self.close_button, 0, QtCore.Qt.AlignHCenter)
        self.record_grid.addLayout(self.webcam_layout)

        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.date_layout = QtWidgets.QHBoxLayout()
        self.date_layout.setObjectName("date_layout")
        self.date_label = QtWidgets.QLabel(self.Record)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        self.date_label.setFont(font)
        self.date_label.setObjectName("date_label")
        self.date_label.setText('Enter Date')
        self.date_layout.addWidget(self.date_label)
        self.select_date = QtWidgets.QDateEdit(self.Record)
        self.select_date.setMaximumDate(QtCore.QDate(2030, 12, 31))
        self.select_date.setMinimumDate(QtCore.QDate(2020, 9, 14))
        self.select_date.setCalendarPopup(True)
        self.select_date.setDate(QtCore.QDate.currentDate())
        self.select_date.setObjectName("select_date")
        self.select_date.dateChanged.connect(self.load_date)
        self.date_layout.addWidget(self.select_date)
        self.date_layout.setStretch(0, 1)
        self.date_layout.setStretch(1, 2)
        self.verticalLayout.addLayout(self.date_layout)

        self.class_select = QtWidgets.QComboBox(self.Record)
        self.class_select.addItems(self.classes)
        self.class_select.setCurrentIndex(0)
        self.class_select.setObjectName("class_select")
        self.verticalLayout.addWidget(self.class_select)

        self.table = QtWidgets.QTableWidget(self.Record)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.table.sizePolicy().hasHeightForWidth())
        self.table.setSizePolicy(sizePolicy)
        self.table.setObjectName("table")
        #self.table.setColumnCount(0)
        #self.table.setRowCount(0)
        self.verticalLayout.addWidget(self.table)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 1)
        self.verticalLayout.setStretch(2, 8)
        self.record_grid.addLayout(self.verticalLayout)
        self.record_grid.setStretch(0, 2)
        self.record_grid.setStretch(1, 1)
        self.verticalLayout_2.addLayout(self.record_grid)
        self.stackedWidget.addWidget(self.Record)

        self.stackedWidget.setCurrentIndex(self.stackedWidget.indexOf(self.Record))
        
        #self.class_select.currentTextChanged.connect(lambda: self.load_Qtable(True))  ##### function that takes argument
        self.class_select.currentTextChanged.connect(lambda state, x= self.table, y= self.class_select, z= True: self.load_Qtable(x,y,z)) ## Function that takes argument in a loop
        self.load_Qtable(self.table, self.class_select, True)
        self.date = self.select_date.date()

        
        self.available_cameras = QCameraInfo.availableCameras()
        if not self.available_cameras:
            pass
        
        self.camera = QCamera(self.available_cameras[0])
        self.cap = cv2.VideoCapture(0)
        self.identity = 'Editing'
        
        ### Should i need to make the frame, identity and other variables inside while object variables (Self)??? does it make runtime faster?

        try:
            while True:
                ret, self.frame = self.cap.read()
                if not ret:
                    break

                
                ### face Recognition

                self.frame = cv2.cvtColor(self.frame, cv2.COLOR_BGR2RGB)
                #self.frame = self.frame[:, :, [2, 1, 0]]
                face_obj = extract_faces(self.frame, target_size = self.target_frame_size, enforce_detection = False)
                bbox = face_obj[0][1]
                x = int(bbox['x'])
                y = int(bbox['y'])
                w = int(bbox['w'])
                h = int(bbox['h'])
        
                self.identity, _ = find_target_identity(face_obj[0][0][0], self.embeddings)
                if self.identity == 'Not Found!!':
                    self.name = ''
                #     continue
                else:
                    self.identity  = int(self.identity)
                    self.df.loc[self.df['ID'] == self.identity, 'Attendance'] = 'Present'
                    self.name = self.df.loc[self.df['ID']==self.identity, 'Name'].values
                    if not len(self.name):
                        self.name = 'From Different Class!'
            
                
                #self.frame = self.frame[:, :, [2, 1, 0]]
                # frame = np.ascontiguousarray(frame, dtype=np.uint8)

                self.load_Qtable(self.table, self.class_select , False)
                cv2.rectangle(self.frame, (x,y), (x+w, y + h),(0,255,0),3)
                cv2.putText(self.frame, f'ID : {str(self.identity)}', (x,y-40), cv2.FONT_HERSHEY_DUPLEX, 1, (255,255,255), 1)
                cv2.putText(self.frame, f'{str(self.name)}', (x,y-20), cv2.FONT_HERSHEY_DUPLEX, 1, (255,255,255), 1)
    
                height, width, channel = self.frame.shape
                bytesPerLine = 3 * width
                qImg = QtGui.QImage(self.frame.data, width, height, bytesPerLine, QtGui.QImage.Format_RGB888)  #.rgbSwapped()
                self.webcam.setPixmap(QtGui.QPixmap(qImg))
                QtWidgets.QApplication.processEvents()

        finally:
            self.cap.release()
            cv2.destroyAllWindows()
    
    def load_date(self):
        self.date = self.select_date.date()

    def load_Qtable(self, table, combo_box, load_from_path):
        self.current_class = combo_box.currentText()
        if load_from_path:
            if os.path.exists(os.path.join(self.students_information_path, self.current_class)):
                self.df = pd.read_excel(os.path.join(self.students_information_path, self.current_class) + '/students_information.xlsx')
                self.df['Attendance'] = ['Absent' for _ in range(self.df.shape[0])]

            else:
                self.df = pd.DataFrame()
        

        table.setHorizontalHeaderLabels(list(self.df.columns))
        table.horizontalHeader().setVisible(True)
        table.setColumnCount(self.df.shape[1])
        table.setRowCount(self.df.shape[0])

            #for column in range(len(self.df.columns)):
            #    self.table.setItem(0,column, QtWidgets.QTableWidgetItem(str(self.df.iloc[0, self.df.columns[column]])))

        for row in range(self.df.shape[0]):
                for column in range(self.df.shape[1]):
                    table.setItem(row,column, QtWidgets.QTableWidgetItem(str(self.df.iloc[row, column])))
                
        

    def home_to_new_student(self):

        self.New_Student = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.New_Student.sizePolicy().hasHeightForWidth())
        self.New_Student.setSizePolicy(sizePolicy)
        self.New_Student.setObjectName("New_Student")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.New_Student)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.new_entry_grid = QtWidgets.QHBoxLayout()
        self.new_entry_grid.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.new_entry_grid.setObjectName("new_entry_grid")
        self.webcam_entry_layout = QtWidgets.QVBoxLayout()
        self.webcam_entry_layout.setObjectName("webcam_entry_layout")
        self.webcam2 = QtWidgets.QLabel(self.New_Student)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.webcam2.sizePolicy().hasHeightForWidth())
        self.webcam2.setSizePolicy(sizePolicy)
        self.webcam2.setText("")
        self.webcam2.setObjectName("webcam2")
        self.webcam_entry_layout.addWidget(self.webcam2)
        self.buttons_layout = QtWidgets.QHBoxLayout()
        self.buttons_layout.setObjectName("buttons_layout")

        self.capture_button = QtWidgets.QPushButton(self.New_Student)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.capture_button.sizePolicy().hasHeightForWidth())
        self.capture_button.setSizePolicy(sizePolicy)
        self.capture_button.setObjectName("capture_button")
        self.capture_button.setText('Capture')
        self.capture_button.clicked.connect(self.image_capture)
        self.buttons_layout.addWidget(self.capture_button)

        self.save_button = QtWidgets.QPushButton(self.New_Student)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.save_button.sizePolicy().hasHeightForWidth())
        self.save_button.setSizePolicy(sizePolicy)
        self.save_button.setObjectName("save_button")
        self.save_button.setText('Save')
        self.save_button.clicked.connect(self.save_new_student)
        self.buttons_layout.addWidget(self.save_button)

        self.student_entry_close_btn = QtWidgets.QPushButton(self.New_Student)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.save_button.sizePolicy().hasHeightForWidth())
        self.student_entry_close_btn.setSizePolicy(sizePolicy)
        self.student_entry_close_btn.setObjectName("s_new_close_button")
        self.student_entry_close_btn.setText('Close')
        self.student_entry_close_btn.clicked.connect(self.student_new_entry_to_home)
        self.buttons_layout.addWidget(self.student_entry_close_btn)

        self.webcam_entry_layout.addLayout(self.buttons_layout)
        self.webcam_entry_layout.setStretch(0, 15)
        self.webcam_entry_layout.setStretch(1, 1)
        self.new_entry_grid.addLayout(self.webcam_entry_layout)
        self.new_info_layout = QtWidgets.QVBoxLayout()
        self.new_info_layout.setObjectName("new_info_layout")
        self.class_layout = QtWidgets.QGridLayout()
        self.class_layout.setObjectName("class_layout")
        
        self.class_select_2 = QtWidgets.QLabel(self.New_Student)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        self.class_select_2.setFont(font)
        self.class_select_2.setObjectName("class_select_2")
        self.class_select_2.setText('Enter Class :')
        self.class_layout.addWidget(self.class_select_2, 0, 0, 1, 1, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignBottom)
        self.class_prompt = QtWidgets.QComboBox(self.New_Student)
        self.class_prompt.setObjectName("class_prompt")
        self.class_prompt.addItems(self.classes)
        self.class_layout.addWidget(self.class_prompt, 1, 0, 1, 1, QtCore.Qt.AlignTop)

        self.new_info_layout.addLayout(self.class_layout)
        self.name_layout = QtWidgets.QGridLayout()
        self.name_layout.setObjectName("name_layout")
        self.name_prompt = QtWidgets.QLabel(self.New_Student)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.name_prompt.sizePolicy().hasHeightForWidth())
        self.name_prompt.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        self.name_prompt.setFont(font)
        self.name_prompt.setObjectName("name_prompt")
        self.name_prompt.setText('Enter Student Name :')
        self.name_layout.addWidget(self.name_prompt, 0, 0, 1, 1, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignBottom)

        self.name = QtWidgets.QLineEdit(self.New_Student)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.name.sizePolicy().hasHeightForWidth())
        self.name.setSizePolicy(sizePolicy)
        self.name.setMinimumSize(QtCore.QSize(0, 40))
        self.name.setMaximumSize(QtCore.QSize(16777215, 40))
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.name.setFont(font)
        self.name.setText("")
        self.name.setObjectName("name")
        self.name_layout.addWidget(self.name, 1, 0, 1, 1, QtCore.Qt.AlignTop)
        self.new_info_layout.addLayout(self.name_layout)

        self.id_layout = QtWidgets.QGridLayout()
        self.id_layout.setObjectName("id_layout")
        self.id = QtWidgets.QLineEdit(self.New_Student)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.id.sizePolicy().hasHeightForWidth())
        self.id.setSizePolicy(sizePolicy)
        self.id.setMinimumSize(QtCore.QSize(0, 40))
        self.id.setMaximumSize(QtCore.QSize(16777215, 40))
        self.id.setObjectName("id")
        self.id_layout.addWidget(self.id, 1, 0, 1, 1, QtCore.Qt.AlignTop)

        self.id_prompt = QtWidgets.QLabel(self.New_Student)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.id_prompt.sizePolicy().hasHeightForWidth())
        self.id_prompt.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(16)
        self.id_prompt.setFont(font)
        self.id_prompt.setObjectName("id_prompt")
        self.id_prompt.setText('Enter Student ID :')
        self.id_layout.addWidget(self.id_prompt, 0, 0, 1, 1, QtCore.Qt.AlignHCenter|QtCore.Qt.AlignBottom)

        self.new_info_layout.addLayout(self.id_layout)
        self.new_entry_grid.addLayout(self.new_info_layout)
        self.new_entry_grid.setStretch(0, 2)
        self.new_entry_grid.setStretch(1, 1)
        self.verticalLayout_8.addLayout(self.new_entry_grid)
        self.stackedWidget.addWidget(self.New_Student)
        self.verticalLayout_3.addWidget(self.stackedWidget)

        
        self.stackedWidget.setCurrentIndex(self.stackedWidget.indexOf(self.New_Student))
        
        self.available_cameras = QCameraInfo.availableCameras()
        if not self.available_cameras:
            pass
        
        self.camera = QCamera(self.available_cameras[0])
        self.cap = cv2.VideoCapture(0)

        self.image_captured = False

        while True:
            ret, self.frame = self.cap.read()
            
            if ret == False or self.image_captured:
                break

            height, width, channel = self.frame.shape
            bytesPerLine = 3 * width
            qImg = QtGui.QImage(self.frame.data, width, height, bytesPerLine, QtGui.QImage.Format_RGB888).rgbSwapped()
            self.webcam2.setPixmap(QtGui.QPixmap(qImg))
            QtWidgets.QApplication.processEvents()
        
        self.cap.release()
        cv2.destroyAllWindows()
        


    def image_capture(self):
        
        s_id = str(self.id.text())
        s_class = self.class_prompt.currentText()
        s_name = self.name.text()
        
        
        if (not s_id) or (not s_name):
            self.msg_box.setInformativeText("Please enter valid class name, student ID and student name!!! ")
            self.msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok) # seperate buttons with "|"
            self.msg_box.show()
            return False

        img_name = 'img.jpg'

        if os.path.exists(os.path.join(self.database_path,s_class,s_id)):
            filepath = os.path.join(self.database_path,s_class,s_id)
        else:
            os.mkdir(os.path.join(self.database_path,s_class,s_id))
            filepath = os.path.join(self.database_path,s_class,s_id)
        
        cv2.imwrite(filepath+'/'+img_name, self.frame)
        self.image_captured = True
        
        #generating embedding vectors
        face_obj = extract_faces(self.frame, target_size = self.target_frame_size, enforce_detection = False)
        face_embedding  = np.squeeze(get_embedding(face_obj[0][0][0]))
        add_representation(s_id, face_embedding)

        self.webcam2.setPixmap(QtGui.QPixmap(filepath+'/'+img_name))
        QtWidgets.QApplication.processEvents()

    def save_new_student(self):
        s_id = str(self.id.text())
        s_class = self.class_prompt.currentText()
        s_name = str(self.name.text())

        if s_id and s_name and s_class and self.image_captured:
            self.msg_box.setInformativeText("Are you sure?? ")
            self.msg_box.setIcon(QtWidgets.QMessageBox.Warning)
            self.msg_box.setStandardButtons(QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No) # seperate buttons with "|"
            self.msg_box.setDefaultButton(QtWidgets.QMessageBox.No)
            retval = self.msg_box.exec()
            if retval == QtWidgets.QMessageBox.No:
                return False
        else:
            self.msg_box.setInformativeText("Please enter valid class name, student ID and student name. Then capture student image!!! ")
            self.msg_box.setIcon(QtWidgets.QMessageBox.Information)
            self.msg_box.setStandardButtons(QtWidgets.QMessageBox.Ok) # seperate buttons with "|"
            self.msg_box.show()
            return False
          
        
        filepath = os.path.join(self.students_information_path, s_class)
        self.df = pd.read_excel(filepath+'/students_information.xlsx')

        self.df.loc[self.df.shape[0]] = [s_id, s_name]
        self.df.to_excel(filepath+'/students_information.xlsx', index=False)
        self.student_new_entry_to_home()

        
        

    def home_to_student_information(self):
        self.Informations = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Informations.sizePolicy().hasHeightForWidth())
        self.Informations.setSizePolicy(sizePolicy)
        self.Informations.setObjectName("Informations")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.Informations)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.student_info_layout = QtWidgets.QVBoxLayout()
        self.student_info_layout.setObjectName("student_info_layout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        
        self.class_selection = QtWidgets.QComboBox(self.Informations)
        self.class_selection.setObjectName("class_selection")
        self.class_selection.addItems(self.classes)
        self.class_selection.currentTextChanged.connect(lambda: self.load_Qtable(self.student_info, self.class_selection, True))
        self.horizontalLayout.addWidget(self.class_selection)

        self.save_student_info_btn = QtWidgets.QPushButton(self.Informations)
        self.save_student_info_btn.setObjectName("save_student_info_btn")
        self.save_student_info_btn.setText('Save')
        self.save_student_info_btn.clicked.connect(self.student_information_to_home)
        self.horizontalLayout.addWidget(self.save_student_info_btn)

        self.close_student_info_btn = QtWidgets.QPushButton(self.Informations)
        self.close_student_info_btn.setObjectName("close_student_info_btn")
        self.close_student_info_btn.setText('Close')
        self.close_student_info_btn.clicked.connect(self.student_information_to_home)
        self.horizontalLayout.addWidget(self.close_student_info_btn)

        self.student_info_layout.addLayout(self.horizontalLayout)
        self.student_info = QtWidgets.QTableWidget(self.Informations)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(14)
        self.student_info.setFont(font)
        self.student_info.setObjectName("student_info")
        #self.student_info.setColumnCount(0)
        #self.student_info.setRowCount(0)
        self.student_info_layout.addWidget(self.student_info)
        self.student_info_layout.setStretch(0, 1)
        self.student_info_layout.setStretch(1, 15)
        self.verticalLayout_4.addLayout(self.student_info_layout)
        self.stackedWidget.addWidget(self.Informations)

        self.stackedWidget.setCurrentIndex(self.stackedWidget.indexOf(self.Informations))

        self.load_Qtable(self.student_info, self.class_selection, True)

    def record_to_home(self):
        self.cap.release()
        cv2.destroyAllWindows()
        self.attendance_file_name = self.class_select.currentText()+'_'+self.date.toString('d_MMMM_yyyy')+'.xlsx'
        if os.path.exists(os.path.join(self.inference_path,self.attendance_file_name)):
            prev_df = pd.read_excel(os.path.join(self.inference_path,self.attendance_file_name))
            prev_attendance = prev_df['Attendance'].values
            new_attendance = self.df['Attendance'].values
            for i in range(len(prev_attendance)):
                if new_attendance[i] == 'Present':
                    prev_attendance[i] = 'Present'
            prev_df['Attendance'] = prev_attendance
            prev_df.to_excel(os.path.join(self.inference_path,self.attendance_file_name))

        else:
            self.df.to_excel(os.path.join(self.inference_path,self.attendance_file_name))
            
        self.stackedWidget.setCurrentIndex(self.stackedWidget.indexOf(self.Home))

    def student_new_entry_to_home(self):
        self.cap.release()
        cv2.destroyAllWindows()
        self.stackedWidget.setCurrentIndex(self.stackedWidget.indexOf(self.Home))


    def student_information_to_home(self):
        self.stackedWidget.setCurrentIndex(self.stackedWidget.indexOf(self.Home))





if __name__=='__main__':
    app = QtWidgets.QApplication.instance()
    if not app:
        app = QtWidgets.QApplication(sys.argv)

    # Ensure that the app is deleted when we close it
    app.aboutToQuit.connect(app.deleteLater)

    database_path = './database/'
    students_information_sheet = './students_information'
    inference_path = './class_participants'
    representation_path = './representations'

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(
        database_path=database_path,
        students_information_path=students_information_sheet,
        inference_path=inference_path,
        representation_path=representation_path
    )
    ui.setupUi(MainWindow)
    MainWindow.show()
    app.exec_()